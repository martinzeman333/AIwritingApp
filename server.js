const express = require('express');
const cors = require('cors');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static('public'));

// Test endpoint pro ovƒõ≈ôen√≠ API kl√≠ƒçe
app.get('/api/test', async (req, res) => {
  try {
    console.log('Testing Perplexity API...');
    
    if (!process.env.PERPLEXITY_API_KEY) {
      return res.status(500).json({ 
        success: false, 
        error: 'PERPLEXITY_API_KEY nen√≠ nastaven v environment variables' 
      });
    }

    const response = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [{ role: 'user', content: 'Hello, test message' }],
      max_tokens: 10
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });

    console.log('API test successful');
    res.json({ 
      success: true, 
      message: 'API kl√≠ƒç funguje spr√°vnƒõ',
      model: 'llama-3.1-sonar-small-128k-online'
    });
  } catch (error) {
    console.error('API test failed:', error.response?.data || error.message);
    res.status(500).json({ 
      success: false, 
      error: error.response?.data?.error?.message || error.message,
      status: error.response?.status
    });
  }
});

// OPRAVA: ChatGPT endpoint - pou≈æ√≠v√° nejlep≈°√≠ dostupn√Ω model DALL-E 3
app.post('/api/generate-image', async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: 'Prompt je povinn√Ω'
      });
    }

    console.log('üéÆ Generating image with DALL-E 3 HD using EXACT prompt:', prompt);

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({
        success: false,
        error: 'OpenAI API kl√≠ƒç nen√≠ nastaven'
      });
    }

    console.log('üéÆ Using EXACT prompt without modifications:', prompt);
    
    try {
      // OPRAVA: Pou≈æ√≠v√° nejlep≈°√≠ dostupn√Ω model DALL-E 3 s HD kvalitou
      const openaiResponse = await axios.post('https://api.openai.com/v1/images/generations', {
        model: 'dall-e-3', // Nejlep≈°√≠ dostupn√Ω model
        prompt: prompt, // P≈ôesn√Ω prompt bez √∫prav
        n: 1,
        size: '1024x1024', // Nejvy≈°≈°√≠ dostupn√© rozli≈°en√≠ pro DALL-E 3
        quality: 'hd', // Nejvy≈°≈°√≠ kvalita
        style: 'vivid' // Nejlep≈°√≠ styl pro ≈æiv√© barvy
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 120000
      });

      if (openaiResponse.data.data?.[0]?.url) {
        const imageUrl = openaiResponse.data.data[0].url;
        console.log('üéÆ HD Image generated with EXACT prompt via DALL-E 3:', imageUrl);
        
        res.json({
          success: true,
          imageUrl: imageUrl,
          prompt: prompt,
          usedPrompt: prompt,
          generationMethod: 'openai-dalle3-hd-exact',
          model: 'dall-e-3',
          quality: 'hd',
          timestamp: new Date().toISOString()
        });
      } else {
        throw new Error('No image URL in OpenAI response');
      }
    } catch (openaiError) {
      console.log('‚ùå OpenAI DALL-E 3 HD failed:', openaiError.response?.data || openaiError.message);
      
      // Fallback na standardn√≠ kvalitu
      try {
        console.log('üîÑ Trying DALL-E 3 with standard quality as fallback...');
        
        const fallbackResponse = await axios.post('https://api.openai.com/v1/images/generations', {
          model: 'dall-e-3',
          prompt: prompt,
          n: 1,
          size: '1024x1024',
          quality: 'standard', // Fallback na standardn√≠ kvalitu
          style: 'vivid'
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 60000
        });

        if (fallbackResponse.data.data?.[0]?.url) {
          const imageUrl = fallbackResponse.data.data[0].url;
          console.log('üéÆ Standard quality image generated:', imageUrl);
          
          res.json({
            success: true,
            imageUrl: imageUrl,
            prompt: prompt,
            usedPrompt: prompt,
            generationMethod: 'openai-dalle3-standard-fallback',
            model: 'dall-e-3',
            quality: 'standard',
            timestamp: new Date().toISOString()
          });
        } else {
          throw new Error('Fallback also failed');
        }
      } catch (fallbackError) {
        console.log('‚ùå Fallback also failed:', fallbackError.message);
        
        res.status(500).json({
          success: false,
          error: 'Nepoda≈ôilo se vygenerovat obr√°zek: ' + (openaiError.response?.data?.error?.message || openaiError.message)
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Image generation error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba p≈ôi generov√°n√≠ obr√°zku: ' + error.message
    });
  }
});

// OPRAVA: Gemini endpoint - pou≈æ√≠v√° nejnovƒõj≈°√≠ Gemini 2.5 Flash
app.post('/api/generate-image-gemini', async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({
        success: false,
        error: 'Prompt je povinn√Ω'
      });
    }

    console.log('üîÆ Generating image with Gemini 2.5 Flash using EXACT prompt:', prompt);

    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({
        success: false,
        error: 'Gemini API kl√≠ƒç nen√≠ nastaven'
      });
    }

    try {
      // OPRAVA: Pou≈æ√≠v√° nejnovƒõj≈°√≠ Gemini 2.5 Flash model
      console.log('üîÆ Using Gemini 2.5 Flash for prompt enhancement...');
      
      const geminiResponse = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`, {
        contents: [{
          parts: [{
            text: `Create a detailed, vivid image description based on this exact prompt: "${prompt}". Enhance it for AI image generation while keeping the core concept intact. Make it visually rich and specific.`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 300
        }
      }, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      if (geminiResponse.data.candidates?.[0]?.content?.parts?.[0]?.text) {
        const enhancedPrompt = geminiResponse.data.candidates[0].content.parts[0].text.trim();
        console.log('üîÆ Gemini 2.5 Flash enhanced prompt:', enhancedPrompt.substring(0, 100) + '...');
        
        // Pou≈æij vylep≈°en√Ω prompt pro DALL-E 3 HD
        const dalleResponse = await axios.post('https://api.openai.com/v1/images/generations', {
          model: 'dall-e-3',
          prompt: enhancedPrompt.substring(0, 1000), // DALL-E m√° limit 1000 znak≈Ø
          n: 1,
          size: '1024x1024',
          quality: 'hd',
          style: 'vivid'
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 120000
        });

        if (dalleResponse.data.data?.[0]?.url) {
          const imageUrl = dalleResponse.data.data[0].url;
          console.log('üîÆ HD Image generated via Gemini 2.5 Flash + DALL-E 3:', imageUrl);
          
          res.json({
            success: true,
            imageUrl: imageUrl,
            prompt: prompt,
            enhancedPrompt: enhancedPrompt,
            generationMethod: 'gemini-2.5-flash-dalle3-hd',
            geminiModel: 'gemini-2.5-flash',
            dalleModel: 'dall-e-3',
            quality: 'hd',
            timestamp: new Date().toISOString()
          });
        } else {
          throw new Error('No image URL in DALL-E response');
        }
      } else {
        throw new Error('No valid response from Gemini 2.5 Flash');
      }
    } catch (geminiError) {
      console.log('‚ùå Gemini 2.5 Flash failed, using direct DALL-E 3 HD with exact prompt...');
      
      // Fallback na p≈ô√≠m√© DALL-E 3 HD s p≈Øvodn√≠m promptem
      const fallbackResponse = await axios.post('https://api.openai.com/v1/images/generations', {
        model: 'dall-e-3',
        prompt: prompt,
        n: 1,
        size: '1024x1024',
        quality: 'hd',
        style: 'vivid'
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 60000
      });

      if (fallbackResponse.data.data?.[0]?.url) {
        const imageUrl = fallbackResponse.data.data[0].url;
        console.log('üîÆ HD Image generated with exact prompt via direct DALL-E 3:', imageUrl);
        
        res.json({
          success: true,
          imageUrl: imageUrl,
          prompt: prompt,
          usedPrompt: prompt,
          generationMethod: 'dalle3-hd-direct-fallback',
          model: 'dall-e-3',
          quality: 'hd',
          timestamp: new Date().toISOString()
        });
      } else {
        throw new Error('Both Gemini 2.5 Flash and DALL-E 3 failed');
      }
    }

  } catch (error) {
    console.error('‚ùå Gemini 2.5 Flash image generation error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba p≈ôi generov√°n√≠ obr√°zku p≈ôes Gemini 2.5 Flash: ' + error.message
    });
  }
});

// Instagram carousel endpoint pouze s ChatGPT obr√°zky
app.post('/api/instagram-image', async (req, res) => {
  try {
    const { selectedText } = req.body;
    
    if (!selectedText) {
      return res.status(400).json({
        success: false,
        error: 'Pro vytvo≈ôen√≠ Instagram carousel mus√≠te vybrat text'
      });
    }

    console.log('üéÆ Generating Instagram carousel with PIXEL ART for text:', selectedText.substring(0, 50));

    // 1. Vygeneruj kr√°tk√Ω poutav√Ω nadpis pro prvn√≠ slide
    const titleResponse = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [
        { 
          role: 'system', 
          content: 'Vytvo≈ô kr√°tk√Ω, poutav√Ω nadpis v ƒçe≈°tinƒõ pro Instagram obr√°zek. Nadpis by mƒõl b√Ωt v√Ωsti≈æn√Ω a l√°kav√Ω (max 40 znak≈Ø). NEPOU≈Ω√çVEJ ≈Ω√ÅDN√â markdown znaƒçky jako #, *, **, _, nebo ---. Odpovƒõz pouze ƒçist√Ωm textem.' 
        },
        { 
          role: 'user', 
          content: `Na z√°kladƒõ tohoto textu vytvo≈ô kr√°tk√Ω nadpis: "${selectedText}"` 
        }
      ],
      temperature: 0.8,
      max_tokens: 50
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // 2. Vygeneruj ƒçist√Ω text pro druh√Ω slide
    const textResponse = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [
        { 
          role: 'system', 
          content: 'Vytvo≈ô struƒçn√Ω, poutav√Ω text pro Instagram carousel slide v ƒçe≈°tinƒõ. Text by mƒõl b√Ωt ƒçiteln√Ω na obr√°zku (max 200 znak≈Ø). NEPOU≈Ω√çVEJ ≈Ω√ÅDN√â markdown znaƒçky jako #, *, **, _, ---, ####. Nepou≈æ√≠vej odr√°≈æky s - nebo *. Nepou≈æ√≠vej nadpisy. Pi≈° pouze ƒçist√Ω text bez jak√©hokoliv form√°tov√°n√≠. Odpovƒõz pouze prost√Ωm textem.' 
        },
        { 
          role: 'user', 
          content: `Na z√°kladƒõ tohoto obsahu vytvo≈ô ƒçist√Ω text pro Instagram slide: "${selectedText}"` 
        }
      ],
      temperature: 0.7,
      max_tokens: 150
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // 3. Vygeneruj NEUTR√ÅLN√ç popis pro pixel art
    const imageDescriptionResponse = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [
        { 
          role: 'system', 
          content: 'Na z√°kladƒõ textu identifikuj NEUTR√ÅLN√ç objekt, budovu, krajinu nebo abstraktn√≠ koncept pro pixel art ilustraci. Vytvo≈ô velmi struƒçn√Ω popis v angliƒçtinƒõ (max 4 slova). NEPOU≈Ω√çVEJ politick√© osobnosti, zbranƒõ, n√°sil√≠, √∫toky nebo kontroverzn√≠ t√©mata. Zamƒõ≈ô se na neutr√°ln√≠ vizu√°ln√≠ prvky. P≈ô√≠klady: "office building", "city skyline", "abstract pattern", "geometric shapes", "retro computer".' 
        },
        { 
          role: 'user', 
          content: `Vytvo≈ô neutr√°ln√≠ pixel art popis pro: "${selectedText}"` 
        }
      ],
      temperature: 0.6,
      max_tokens: 15
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // 4. Vygeneruj ƒçist√© hashtags
    const hashtagsResponse = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [
        { 
          role: 'system', 
          content: 'Vytvo≈ô pouze ƒçist√© hashtags pro Instagram. Odpovƒõz pouze hashtags oddƒõlen√© mezerami, nic jin√©ho. Nepou≈æ√≠vej markdown form√°tov√°n√≠.' 
        },
        { 
          role: 'user', 
          content: `Vytvo≈ô 8-12 relevantn√≠ch hashtag≈Ø pro: "${selectedText}"` 
        }
      ],
      temperature: 0.6,
      max_tokens: 150
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // 5. Vyƒçisti mainSubject a vytvo≈ô pixel art prompt
    let mainSubject = imageDescriptionResponse.data.choices[0].message.content.trim();
    
    // Z√°kladn√≠ ƒçi≈°tƒõn√≠
    mainSubject = mainSubject
      .replace(/\*\*/g, '')
      .replace(/\*/g, '')
      .replace(/#/g, '')
      .replace(/_/g, '')
      .replace(/---/g, '')
      .replace(/:/g, '')
      .replace(/"/g, '')
      .replace(/'/g, '')
      .replace(/\[/g, '')
      .replace(/\]/g, '')
      .replace(/\(/g, '')
      .replace(/\)/g, '')
      .replace(/\s+/g, ' ')
      .trim();
    
    // Fallback pokud je mainSubject pr√°zdn√Ω
    if (!mainSubject || mainSubject.length < 3) {
      console.log('‚ö†Ô∏è Using safe fallback subject due to empty content');
      mainSubject = 'geometric abstract pattern';
    }
    
    // Vytvo≈ô pixel art prompt
    const pixelArtPrompt = `${mainSubject}, 16-bit pixel art style, retro gaming aesthetic, vibrant colors, crisp pixel work, detailed pixel graphics, classic video game style, blocky visuals, pixelated illustration, 8-bit aesthetic, digital art`;
    
    console.log('üéÆ Safe mainSubject:', mainSubject);
    console.log('üéÆ Pixel art prompt:', pixelArtPrompt);
    
    let backgroundImageUrl = null;
    
    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({
        success: false,
        error: 'OpenAI API kl√≠ƒç nen√≠ nastaven - nelze generovat obr√°zky'
      });
    }

    try {
      console.log('üéÆ Generating HD pixel art with DALL-E 3...');
      
      // OPRAVA: Pou≈æ√≠v√° DALL-E 3 HD pro nejlep≈°√≠ kvalitu
      const imageResponse = await axios.post('https://api.openai.com/v1/images/generations', {
        model: 'dall-e-3',
        prompt: pixelArtPrompt,
        n: 1,
        size: '1024x1024',
        quality: 'hd', // HD kvalita pro Instagram
        style: 'vivid'
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 120000
      });

      if (imageResponse.data.data?.[0]?.url) {
        backgroundImageUrl = imageResponse.data.data[0].url;
        console.log('üéÆ HD Pixel art illustration generated successfully:', backgroundImageUrl);
      } else {
        throw new Error('No image URL in response');
      }
    } catch (imageError) {
      console.log('‚ùå HD Image generation failed:', imageError.response?.data || imageError.message);
      
      try {
        console.log('üîÑ Trying standard quality pixel art as fallback...');
        
        const fallbackResponse = await axios.post('https://api.openai.com/v1/images/generations', {
          model: 'dall-e-3',
          prompt: 'geometric abstract pattern, 16-bit pixel art style, retro gaming aesthetic, vibrant colors, simple shapes, blocky visuals, 8-bit aesthetic',
          n: 1,
          size: '1024x1024',
          quality: 'standard',
          style: 'vivid'
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 60000
        });

        if (fallbackResponse.data.data?.[0]?.url) {
          backgroundImageUrl = fallbackResponse.data.data[0].url;
          console.log('üéÆ Fallback geometric pixel art generated:', backgroundImageUrl);
        } else {
          throw new Error('Fallback failed - no image URL');
        }
      } catch (fallbackError) {
        console.log('‚ùå Fallback also failed:', fallbackError.message);
        
        return res.status(500).json({
          success: false,
          error: 'Nepoda≈ôilo se vygenerovat pixel art obr√°zek: ' + (imageError.response?.data?.error?.message || imageError.message)
        });
      }
    }

    // Vyƒçisti text od markdown znaƒçek
    const title = titleResponse.data.choices[0].message.content.trim()
      .replace(/[#*_`~\[\]]/g, '')
      .replace(/^[-\s]+|[-\s]+$/g, '')
      .replace(/\*\*/g, '')
      .replace(/###/g, '')
      .replace(/####/g, '')
      .replace(/^- /gm, '')
      .replace(/^\* /gm, '');

    const slideText = textResponse.data.choices[0].message.content.trim()
      .replace(/[#*_`~\[\]]/g, '')
      .replace(/^[-\s]+|[-\s]+$/g, '')
      .replace(/\*\*/g, '')
      .replace(/###/g, '')
      .replace(/####/g, '')
      .replace(/^- /gm, '')
      .replace(/^\* /gm, '')
      .replace(/^Sport$/gm, '')
      .replace(/^Politika$/gm, '')
      .replace(/^Ekonomika$/gm, '');
    
    // Vyƒçisti hashtags
    let hashtags = hashtagsResponse.data.choices[0].message.content.trim();
    hashtags = hashtags.split(/\s+/).filter(tag => tag.startsWith('#')).join(' ');
    
    console.log('üéÆ Generated Instagram carousel with DALL-E 3 HD PIXEL ART:', {
      title: title,
      text: slideText,
      hashtags: hashtags,
      mainSubject: mainSubject,
      pixelArtPrompt: pixelArtPrompt,
      backgroundImage: backgroundImageUrl
    });

    res.json({
      success: true,
      title: title,
      result: slideText,
      hashtags: hashtags,
      backgroundImageUrl: backgroundImageUrl,
      imageDescription: pixelArtPrompt,
      action: 'instagram-carousel-dalle3-hd',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Instagram carousel generation error:', error);
    res.status(500).json({
      success: false,
      error: 'Chyba p≈ôi generov√°n√≠ Instagram carousel: ' + (error.response?.data?.error?.message || error.message)
    });
  }
});

// Perplexity API proxy endpoint
app.post('/api/perplexity', async (req, res) => {
  try {
    const { prompt, selectedText, action } = req.body;
    
    console.log('Received request:', { 
      action, 
      prompt: prompt?.substring(0, 50) + (prompt?.length > 50 ? '...' : ''), 
      selectedText: selectedText?.substring(0, 50) + (selectedText?.length > 50 ? '...' : ''),
      timestamp: new Date().toISOString()
    });
    
    if (!process.env.PERPLEXITY_API_KEY) {
      console.error('PERPLEXITY_API_KEY not found in environment variables');
      return res.status(500).json({
        success: false,
        error: 'API kl√≠ƒç nen√≠ nastaven v environment variables'
      });
    }

    let systemPrompt = "Jsi u≈æiteƒçn√Ω asistent, kter√Ω pom√°h√° s √∫pravou textu. Odpov√≠dej v ƒçe≈°tinƒõ. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---. Odpov√≠dej pouze ƒçist√Ωm textem.";
    let userPrompt = prompt;

    // P≈ôednastaven√© AI funkce s anti-markdown instrukcemi
    switch (action) {
      case 'summarize':
        if (!selectedText) {
          return res.status(400).json({
            success: false,
            error: 'Pro sumarizaci mus√≠te vybrat text'
          });
        }
        systemPrompt = "Jsi expert na sumarizaci textu. Vytvo≈ô struƒçn√© shrnut√≠ dan√©ho textu v ƒçe≈°tinƒõ. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---, ####. Nepou≈æ√≠vej odr√°≈æky. Odpov√≠dej pouze ƒçist√Ωm textem.";
        userPrompt = `Sumarizuj n√°sleduj√≠c√≠ text: "${selectedText}"`;
        break;
      case 'twitter':
        if (!selectedText) {
          return res.status(400).json({
            success: false,
            error: 'Pro vytvo≈ôen√≠ Twitter postu mus√≠te vybrat text'
          });
        }
        systemPrompt = "Jsi expert na tvorbu obsahu pro soci√°ln√≠ s√≠tƒõ. Vytvo≈ô atraktivn√≠ Twitter post v ƒçe≈°tinƒõ. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---. Odpov√≠dej pouze ƒçist√Ωm textem.";
        userPrompt = `P≈ôepis n√°sleduj√≠c√≠ text do form√°tu vhodn√©ho pro Twitter post (max 280 znak≈Ø): "${selectedText}"`;
        break;
      case 'expand':
        if (!selectedText) {
          return res.status(400).json({
            success: false,
            error: 'Pro roz≈°√≠≈ôen√≠ textu mus√≠te vybrat text'
          });
        }
        systemPrompt = "Jsi expert na roz≈°i≈ôov√°n√≠ a vylep≈°ov√°n√≠ text≈Ø. Roz≈°i≈ô dan√Ω text zachov√°n√≠m p≈Øvodn√≠ho v√Ωznamu. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---. Odpov√≠dej pouze ƒçist√Ωm textem.";
        userPrompt = `Roz≈°i≈ô a vylep≈°i n√°sleduj√≠c√≠ text: "${selectedText}"`;
        break;
      case 'improve':
        if (!selectedText) {
          return res.status(400).json({
            success: false,
            error: 'Pro vylep≈°en√≠ textu mus√≠te vybrat text'
          });
        }
        systemPrompt = "Jsi expert na jazykov√© korekce a stylistick√© √∫pravy. Vylep≈°i gramatiku a styl textu. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---, ####. Nepou≈æ√≠vej odr√°≈æky. Odpov√≠dej pouze ƒçist√Ωm textem.";
        userPrompt = `Vylep≈°i gramatiku a styl n√°sleduj√≠c√≠ho textu: "${selectedText}"`;
        break;
      case 'generate':
      case 'custom':
        if (!prompt) {
          return res.status(400).json({
            success: false,
            error: 'Mus√≠te zadat prompt pro generov√°n√≠ textu'
          });
        }
        systemPrompt = "Jsi u≈æiteƒçn√Ω asistent. Odpov√≠dej v ƒçe≈°tinƒõ. NEPOU≈Ω√çVEJ markdown form√°tov√°n√≠ jako #, *, **, _, ---. Odpov√≠dej pouze ƒçist√Ωm textem.";
        userPrompt = selectedText ? `${prompt} "${selectedText}"` : prompt;
        break;
      default:
        userPrompt = selectedText ? `${prompt} "${selectedText}"` : prompt;
    }

    console.log('Making API request to Perplexity...');

    const response = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: 'llama-3.1-sonar-small-128k-online',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    if (!response.data.choices || response.data.choices.length === 0) {
      throw new Error('API nevr√°tilo ≈æ√°dn√© v√Ωsledky');
    }

    if (!response.data.choices[0].message || !response.data.choices[0].message.content) {
      throw new Error('API vr√°tilo pr√°zdnou odpovƒõƒè');
    }

    let result = response.data.choices[0].message.content.trim();
    
    // Vyƒçisti v√Ωsledek od markdown znaƒçek
    result = result
      .replace(/[#*_`~\[\]]/g, '')
      .replace(/^[-\s]+|[-\s]+$/g, '')
      .replace(/\*\*/g, '')
      .replace(/###/g, '')
      .replace(/####/g, '')
      .replace(/^- /gm, '')
      .replace(/^\* /gm, '')
      .replace(/^Sport$/gm, '')
      .replace(/^Politika$/gm, '')
      .replace(/^Ekonomika$/gm, '');
    
    if (!result) {
      throw new Error('API vr√°tilo pr√°zdn√Ω obsah');
    }

    console.log('Sending successful response, content length:', result.length);

    res.json({
      success: true,
      result: result,
      action: action,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Perplexity API error:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      url: error.config?.url,
      method: error.config?.method,
      timeout: error.code === 'ECONNABORTED',
      timestamp: new Date().toISOString()
    });

    let errorMessage = 'Nezn√°m√° chyba p≈ôi komunikaci s AI';
    let statusCode = 500;

    if (error.response) {
      statusCode = error.response.status;
      switch (error.response.status) {
        case 401:
          errorMessage = 'Neplatn√Ω API kl√≠ƒç';
          break;
        case 403:
          errorMessage = 'P≈ô√≠stup zam√≠tnut - zkontrolujte API kl√≠ƒç';
          break;
        case 429:
          errorMessage = 'P≈ôekroƒçen limit API po≈æadavk≈Ø';
          break;
        case 500:
          errorMessage = 'Chyba na stranƒõ Perplexity serveru';
          break;
        default:
          errorMessage = error.response.data?.error?.message || `HTTP ${error.response.status}`;
      }
    } else if (error.request) {
      errorMessage = 'Timeout nebo s√≠≈•ov√° chyba';
    } else {
      errorMessage = error.message;
    }

    res.status(statusCode).json({
      success: false,
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    env: {
      hasPerplexityKey: !!process.env.PERPLEXITY_API_KEY,
      hasOpenAIKey: !!process.env.OPENAI_API_KEY,
      hasStabilityKey: !!process.env.STABILITY_API_KEY,
      hasReplicateKey: !!process.env.REPLICATE_API_TOKEN,
      hasGeminiKey: !!process.env.GEMINI_API_KEY,
      nodeEnv: process.env.NODE_ENV,
      port: PORT
    }
  });
});

// Hlavn√≠ str√°nka
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/public/index.html');
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Endpoint not found',
    path: req.originalUrl 
  });
});

// Global error handler
app.use((error, req, res, next) => {
  console.error('Unhandled error:', error);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Server bƒõ≈æ√≠ na portu ${PORT}`);
  console.log(`üìÖ Spu≈°tƒõno: ${new Date().toISOString()}`);
  console.log(`üîë Perplexity API: ${process.env.PERPLEXITY_API_KEY ? 'nastaven' : 'CHYB√ç!'}`);
  console.log(`ü§ñ OpenAI API: ${process.env.OPENAI_API_KEY ? 'nastaven' : 'CHYB√ç!'}`);
  console.log(`üé® Stability AI: ${process.env.STABILITY_API_KEY ? 'nastaven' : 'CHYB√ç!'}`);
  console.log(`üîÑ Replicate: ${process.env.REPLICATE_API_TOKEN ? 'nastaven' : 'CHYB√ç!'}`);
  console.log(`üîÆ Gemini API: ${process.env.GEMINI_API_KEY ? 'nastaven' : 'CHYB√ç!'}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üéÆ Image Generation: DALL-E 3 HD + Gemini 2.5 Flash enhancement!`);
  console.log(`üì± Instagram Editor: Nejlep≈°√≠ dostupn√© modely pro generov√°n√≠`);
});
